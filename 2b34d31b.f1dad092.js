(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{234:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var i=n(0),r=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},_={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),m=i,u=b["".concat(c,".").concat(m)]||b[m]||_[m]||o;return n?r.a.createElement(u,a(a({ref:t},l),{},{components:n})):r.a.createElement(u,a({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,c=new Array(o);c[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,c[1]=a;for(var l=2;l<o;l++)c[l]=n[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},88:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var i=n(3),r=n(7),o=(n(0),n(234)),c={id:"slicekey_slicekey_int__int__int__int__int__color_",sidebar_label:"SliceKey.SliceKey(int, int, int, int, int, Color)",hide_title:!0,slug:"slicekey_slicekey_int__int__int__int__int__color_"},a={unversionedId:"api/slicekey_slicekey_int__int__int__int__int__color_",id:"api/slicekey_slicekey_int__int__int__int__int__color_",isDocsHomePage:!1,title:"slicekey_slicekey_int__int__int__int__int__color_",description:"MonoGame.Aseprite",source:"@site/docs\\api\\slicekey_slicekey_int__int__int__int__int__color_.md",slug:"/api/slicekey_slicekey_int__int__int__int__int__color_",permalink:"/monogame-aseprite/api/slicekey_slicekey_int__int__int__int__int__color_",editUrl:"https://github.com/manbeardgames/monogame-aseprite/tree/gh-pages-develop/docs/api/slicekey_slicekey_int__int__int__int__int__color_.md",version:"current",sidebar_label:"SliceKey.SliceKey(int, int, int, int, int, Color)"},s=[{value:"MonoGame.Aseprite.Graphics.MonoGame.Aseprite.Graphics.SliceKey",id:"monogameasepritegraphicsmonogameasepritegraphicsslicekey",children:[]},{value:"SliceKey(int, int, int, int, int, Color) Constructor",id:"slicekeyint-int-int-int-int-color-constructor",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h4",{id:"index"},Object(o.b)("a",Object(i.a)({parentName:"h4"},{href:"index",title:"index"}),"MonoGame.Aseprite")),Object(o.b)("h3",{id:"monogameasepritegraphicsmonogameasepritegraphicsslicekey"},Object(o.b)("a",Object(i.a)({parentName:"h3"},{href:"monogame_aseprite_graphics",title:"MonoGame.Aseprite.Graphics"}),"MonoGame.Aseprite.Graphics"),".",Object(o.b)("a",Object(i.a)({parentName:"h3"},{href:"slicekey",title:"MonoGame.Aseprite.Graphics.SliceKey"}),"SliceKey")),Object(o.b)("h2",{id:"slicekeyint-int-int-int-int-color-constructor"},"SliceKey(int, int, int, int, int, Color) Constructor"),Object(o.b)("p",null,"Creates a new ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"slicekey",title:"MonoGame.Aseprite.Graphics.SliceKey"}),"SliceKey")," structure  "),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-csharp"}),"public SliceKey(int frame, int x, int y, int width, int height, Color color);\n")),Object(o.b)("h4",{id:"parameters"},"Parameters"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"frame")," ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/dotnet/api/System.Int32",title:"System.Int32"}),"System.Int32"),Object(o.b)("br",{parentName:"p"}),"\n","The index of the frame that this slicekey is valid for.  "),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"x")," ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/dotnet/api/System.Int32",title:"System.Int32"}),"System.Int32"),Object(o.b)("br",{parentName:"p"}),"\n","The top-left x-coordinate position of hte bounds of this slicekey.  "),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"y")," ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/dotnet/api/System.Int32",title:"System.Int32"}),"System.Int32"),Object(o.b)("br",{parentName:"p"}),"\n","The top-left y-coordinate position of the bounds of this slicekey.  "),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"width")," ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/dotnet/api/System.Int32",title:"System.Int32"}),"System.Int32"),Object(o.b)("br",{parentName:"p"}),"\n","The width, in pixels, of the bounds of this slicekey.  "),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"height")," ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/dotnet/api/System.Int32",title:"System.Int32"}),"System.Int32"),Object(o.b)("br",{parentName:"p"}),"\n","The height, in pixels, of the bounds of this slicekey.  "),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"color")," ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Xna.Framework.Color",title:"Microsoft.Xna.Framework.Color"}),"Microsoft.Xna.Framework.Color"),Object(o.b)("br",{parentName:"p"}),"\n","The color of this slicekey.  "))}p.isMDXComponent=!0}}]);